-- Test some triggers (AFTER|BEFORE) (FOR EACH ROW|FOR EACH STATEMENT)
CREATE OR REPLACE FUNCTION send_notice()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
BEGIN
	RAISE NOTICE 'Trigger: %, relation: %.%, op: %, when: %, level: %',
		TG_NAME, TG_TABLE_SCHEMA, TG_TABLE_NAME, TG_OP, TG_WHEN, TG_LEVEL;
	IF (TG_LEVEL = 'ROW') THEN
		RETURN NEW;
	ELSE
		RETURN NULL;
	END IF;
END;
$$;

CREATE OR REPLACE FUNCTION cancel_26()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
BEGIN
	IF (EXTRACT(DAY FROM NEW.dt) = 26) THEN
		RETURN NULL;
	END IF;
	RETURN NEW;
END;
$$;

CREATE TRIGGER tg_before_insert BEFORE INSERT ON test_cc_2012_01 FOR EACH ROW EXECUTE PROCEDURE send_notice();
CREATE TRIGGER tg_before_insert BEFORE INSERT ON test_cc_2012_02 FOR EACH ROW EXECUTE PROCEDURE send_notice();
CREATE TRIGGER tg_before_insert BEFORE INSERT ON test_cc_2012_03 FOR EACH ROW EXECUTE PROCEDURE send_notice();
CREATE TRIGGER tg_before_insert BEFORE INSERT ON test_cc_2012_04 FOR EACH ROW EXECUTE PROCEDURE send_notice();
CREATE TRIGGER tg_before_insert BEFORE INSERT ON test_cc_2012_05 FOR EACH ROW EXECUTE PROCEDURE send_notice();
CREATE TRIGGER tg_before_insert BEFORE INSERT ON test_cc_2012_06 FOR EACH ROW EXECUTE PROCEDURE send_notice();
CREATE TRIGGER tg_before_insert BEFORE INSERT ON test_cc_2012_07 FOR EACH ROW EXECUTE PROCEDURE send_notice();
CREATE TRIGGER tg_before_insert BEFORE INSERT ON test_cc_2012_08 FOR EACH ROW EXECUTE PROCEDURE send_notice();
CREATE TRIGGER tg_before_insert BEFORE INSERT ON test_cc_2012_09 FOR EACH ROW EXECUTE PROCEDURE send_notice();
CREATE TRIGGER tg_before_insert BEFORE INSERT ON test_cc_2012_10 FOR EACH ROW EXECUTE PROCEDURE send_notice();
CREATE TRIGGER tg_before_insert BEFORE INSERT ON test_cc_2012_11 FOR EACH ROW EXECUTE PROCEDURE send_notice();
CREATE TRIGGER tg_before_insert BEFORE INSERT ON test_cc_2012_12 FOR EACH ROW EXECUTE PROCEDURE send_notice();

CREATE TRIGGER tg_cancel_26 BEFORE INSERT ON test_cc_2012_01 FOR EACH ROW EXECUTE PROCEDURE cancel_26();
CREATE TRIGGER tg_cancel_26 BEFORE INSERT ON test_cc_2012_02 FOR EACH ROW EXECUTE PROCEDURE cancel_26();
CREATE TRIGGER tg_cancel_26 BEFORE INSERT ON test_cc_2012_03 FOR EACH ROW EXECUTE PROCEDURE cancel_26();
CREATE TRIGGER tg_cancel_26 BEFORE INSERT ON test_cc_2012_04 FOR EACH ROW EXECUTE PROCEDURE cancel_26();
CREATE TRIGGER tg_cancel_26 BEFORE INSERT ON test_cc_2012_05 FOR EACH ROW EXECUTE PROCEDURE cancel_26();
CREATE TRIGGER tg_cancel_26 BEFORE INSERT ON test_cc_2012_06 FOR EACH ROW EXECUTE PROCEDURE cancel_26();
CREATE TRIGGER tg_cancel_26 BEFORE INSERT ON test_cc_2012_07 FOR EACH ROW EXECUTE PROCEDURE cancel_26();
CREATE TRIGGER tg_cancel_26 BEFORE INSERT ON test_cc_2012_08 FOR EACH ROW EXECUTE PROCEDURE cancel_26();
CREATE TRIGGER tg_cancel_26 BEFORE INSERT ON test_cc_2012_09 FOR EACH ROW EXECUTE PROCEDURE cancel_26();
CREATE TRIGGER tg_cancel_26 BEFORE INSERT ON test_cc_2012_10 FOR EACH ROW EXECUTE PROCEDURE cancel_26();
CREATE TRIGGER tg_cancel_26 BEFORE INSERT ON test_cc_2012_11 FOR EACH ROW EXECUTE PROCEDURE cancel_26();
CREATE TRIGGER tg_cancel_26 BEFORE INSERT ON test_cc_2012_12 FOR EACH ROW EXECUTE PROCEDURE cancel_26();

CREATE TRIGGER tg_after_insert AFTER INSERT ON test_cc_2012_01 FOR EACH ROW EXECUTE PROCEDURE send_notice();
CREATE TRIGGER tg_after_insert AFTER INSERT ON test_cc_2012_02 FOR EACH ROW EXECUTE PROCEDURE send_notice();
CREATE TRIGGER tg_after_insert AFTER INSERT ON test_cc_2012_03 FOR EACH ROW EXECUTE PROCEDURE send_notice();
CREATE TRIGGER tg_after_insert AFTER INSERT ON test_cc_2012_04 FOR EACH ROW EXECUTE PROCEDURE send_notice();
CREATE TRIGGER tg_after_insert AFTER INSERT ON test_cc_2012_05 FOR EACH ROW EXECUTE PROCEDURE send_notice();
CREATE TRIGGER tg_after_insert AFTER INSERT ON test_cc_2012_06 FOR EACH ROW EXECUTE PROCEDURE send_notice();
CREATE TRIGGER tg_after_insert AFTER INSERT ON test_cc_2012_07 FOR EACH ROW EXECUTE PROCEDURE send_notice();
CREATE TRIGGER tg_after_insert AFTER INSERT ON test_cc_2012_08 FOR EACH ROW EXECUTE PROCEDURE send_notice();
CREATE TRIGGER tg_after_insert AFTER INSERT ON test_cc_2012_09 FOR EACH ROW EXECUTE PROCEDURE send_notice();
CREATE TRIGGER tg_after_insert AFTER INSERT ON test_cc_2012_10 FOR EACH ROW EXECUTE PROCEDURE send_notice();
CREATE TRIGGER tg_after_insert AFTER INSERT ON test_cc_2012_11 FOR EACH ROW EXECUTE PROCEDURE send_notice();
CREATE TRIGGER tg_after_insert AFTER INSERT ON test_cc_2012_12 FOR EACH ROW EXECUTE PROCEDURE send_notice();

CREATE TRIGGER tg_before_insert_stm BEFORE INSERT ON test_cc FOR EACH STATEMENT EXECUTE PROCEDURE send_notice();
CREATE TRIGGER tg_after_insert_stm AFTER INSERT ON test_cc FOR EACH STATEMENT EXECUTE PROCEDURE send_notice();

CREATE TRIGGER tg_before_insert_stm BEFORE INSERT ON test_cc_2012_01 FOR EACH STATEMENT EXECUTE PROCEDURE send_notice();
CREATE TRIGGER tg_before_insert_stm BEFORE INSERT ON test_cc_2012_02 FOR EACH STATEMENT EXECUTE PROCEDURE send_notice();
CREATE TRIGGER tg_before_insert_stm BEFORE INSERT ON test_cc_2012_03 FOR EACH STATEMENT EXECUTE PROCEDURE send_notice();
CREATE TRIGGER tg_before_insert_stm BEFORE INSERT ON test_cc_2012_04 FOR EACH STATEMENT EXECUTE PROCEDURE send_notice();
CREATE TRIGGER tg_before_insert_stm BEFORE INSERT ON test_cc_2012_05 FOR EACH STATEMENT EXECUTE PROCEDURE send_notice();
CREATE TRIGGER tg_before_insert_stm BEFORE INSERT ON test_cc_2012_06 FOR EACH STATEMENT EXECUTE PROCEDURE send_notice();
CREATE TRIGGER tg_before_insert_stm BEFORE INSERT ON test_cc_2012_07 FOR EACH STATEMENT EXECUTE PROCEDURE send_notice();
CREATE TRIGGER tg_before_insert_stm BEFORE INSERT ON test_cc_2012_08 FOR EACH STATEMENT EXECUTE PROCEDURE send_notice();
CREATE TRIGGER tg_before_insert_stm BEFORE INSERT ON test_cc_2012_09 FOR EACH STATEMENT EXECUTE PROCEDURE send_notice();
CREATE TRIGGER tg_before_insert_stm BEFORE INSERT ON test_cc_2012_10 FOR EACH STATEMENT EXECUTE PROCEDURE send_notice();
CREATE TRIGGER tg_before_insert_stm BEFORE INSERT ON test_cc_2012_11 FOR EACH STATEMENT EXECUTE PROCEDURE send_notice();
CREATE TRIGGER tg_before_insert_stm BEFORE INSERT ON test_cc_2012_12 FOR EACH STATEMENT EXECUTE PROCEDURE send_notice();

CREATE TRIGGER tg_after_insert_stm AFTER INSERT ON test_cc_2012_01 FOR EACH STATEMENT EXECUTE PROCEDURE send_notice();
CREATE TRIGGER tg_after_insert_stm AFTER INSERT ON test_cc_2012_02 FOR EACH STATEMENT EXECUTE PROCEDURE send_notice();
CREATE TRIGGER tg_after_insert_stm AFTER INSERT ON test_cc_2012_03 FOR EACH STATEMENT EXECUTE PROCEDURE send_notice();
CREATE TRIGGER tg_after_insert_stm AFTER INSERT ON test_cc_2012_04 FOR EACH STATEMENT EXECUTE PROCEDURE send_notice();
CREATE TRIGGER tg_after_insert_stm AFTER INSERT ON test_cc_2012_05 FOR EACH STATEMENT EXECUTE PROCEDURE send_notice();
CREATE TRIGGER tg_after_insert_stm AFTER INSERT ON test_cc_2012_06 FOR EACH STATEMENT EXECUTE PROCEDURE send_notice();
CREATE TRIGGER tg_after_insert_stm AFTER INSERT ON test_cc_2012_07 FOR EACH STATEMENT EXECUTE PROCEDURE send_notice();
CREATE TRIGGER tg_after_insert_stm AFTER INSERT ON test_cc_2012_08 FOR EACH STATEMENT EXECUTE PROCEDURE send_notice();
CREATE TRIGGER tg_after_insert_stm AFTER INSERT ON test_cc_2012_09 FOR EACH STATEMENT EXECUTE PROCEDURE send_notice();
CREATE TRIGGER tg_after_insert_stm AFTER INSERT ON test_cc_2012_10 FOR EACH STATEMENT EXECUTE PROCEDURE send_notice();
CREATE TRIGGER tg_after_insert_stm AFTER INSERT ON test_cc_2012_11 FOR EACH STATEMENT EXECUTE PROCEDURE send_notice();
CREATE TRIGGER tg_after_insert_stm AFTER INSERT ON test_cc_2012_12 FOR EACH STATEMENT EXECUTE PROCEDURE send_notice();

\i sql/insert_data_2.sql
\i sql/verify.sql

